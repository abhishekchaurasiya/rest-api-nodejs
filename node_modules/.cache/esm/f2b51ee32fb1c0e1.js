let Joi,JwtServices,RefreshModel,UserModel,CustomErrorHandler,bcrypt,RFRESH_SECRET_KEY;_2fb‍.x([["default",()=>_2fb‍.o]]);_2fb‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_2fb‍.w("../../service/JwtServices",[["default",["JwtServices"],function(v){JwtServices=v}]]);_2fb‍.w("../../model",[["RefreshModel",["RefreshModel"],function(v){RefreshModel=v}],["UserModel",["UserModel"],function(v){UserModel=v}]]);_2fb‍.w("../../service/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_2fb‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_2fb‍.w("../../config",[["RFRESH_SECRET_KEY",["RFRESH_SECRET_KEY"],function(v){RFRESH_SECRET_KEY=v}]]);







const loginController = {
    async login(req, res, next) {
        // validation 
        const loginSchem = Joi.object({
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
        });

        const { error } = loginSchem.validate(req.body);
        if (error) {
            return next(error)
        };

        const { email, password } = req.body;
        try {
            const user = await UserModel.findOne({ email: email })
            if (!user) {
                return next(CustomErrorHandler.wrongCredential())
            }

            // compare the password 
            const match = await bcrypt.compare(password, user.password)
            if (!match) {
                return next(CustomErrorHandler.wrongCredential())
            }
            // access token generate 
            const access_token = JwtServices.sign({ _id: user._id, role: user.role });
            // Refresh token ka use karke apne access token ko strong kar skte hai
            const refresh_token = JwtServices.sign({ _id: user._id, role: user.role }, '1y', RFRESH_SECRET_KEY);

            //  database white list (means database me store karna)
            await RefreshModel.create({ token: refresh_token })

            res.json({ msg: "User hasbeen logged In", access_token, refresh_token })

        } catch (error) {
            return next(error)
        }
    },

};

_2fb‍.d(loginController);