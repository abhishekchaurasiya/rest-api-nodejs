let express,loginController,logoutController,refreshController,registerController,userController,productController,admin,auth;_d3d‍.x([["default",()=>_d3d‍.o]]);_d3d‍.w("express",[["default",["express"],function(v){express=v}]]);_d3d‍.w("../controller",[["loginController",["loginController"],function(v){loginController=v}],["logoutController",["logoutController"],function(v){logoutController=v}],["refreshController",["refreshController"],function(v){refreshController=v}],["registerController",["registerController"],function(v){registerController=v}],["userController",["userController"],function(v){userController=v}],["productController",["productController"],function(v){productController=v}]]);_d3d‍.w("../middlewares/admin",[["default",["admin"],function(v){admin=v}]]);_d3d‍.w("../middlewares/auth",[["default",["auth"],function(v){auth=v}]]);
const router = express.Router();





router.post("/register", registerController.register);

router.post("/login", loginController.login);

router.get("/me", auth, userController.me);

router.get("/refresh", refreshController.refreshToken);

router.post("/logout", auth, logoutController.logout)

router.post("/product", [auth, admin], productController.store)

router.put("/product/:id", [auth, admin], productController.update)

router.delete("/product/:id", [auth, admin], productController.deleteProduct)

router.get("/product", productController.getProductList)

router.get("/product/:id", productController.getSingleProduct)

_d3d‍.d(router);

